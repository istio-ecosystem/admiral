/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/istio-ecosystem/admiral/admiral/pkg/apis/admiral/v1alpha1"
)

// RouteApplyConfiguration represents an declarative configuration of the Route type for use
// with apply.
type RouteApplyConfiguration struct {
	Name                 *string            `json:"name,omitempty"`
	Inbound              *string            `json:"inbound,omitempty"`
	Outbound             *string            `json:"outbound,omitempty"`
	FilterSelector       *string            `json:"filterSelector,omitempty"`
	WorkloadEnvSelectors []string           `json:"workloadEnvSelectors,omitempty"`
	Timeout              *int               `json:"timeout,omitempty"`
	Config               []*v1alpha1.Config `json:"config,omitempty"`
}

// RouteApplyConfiguration constructs an declarative configuration of the Route type for use with
// apply.
func Route() *RouteApplyConfiguration {
	return &RouteApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *RouteApplyConfiguration) WithName(value string) *RouteApplyConfiguration {
	b.Name = &value
	return b
}

// WithInbound sets the Inbound field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Inbound field is set to the value of the last call.
func (b *RouteApplyConfiguration) WithInbound(value string) *RouteApplyConfiguration {
	b.Inbound = &value
	return b
}

// WithOutbound sets the Outbound field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Outbound field is set to the value of the last call.
func (b *RouteApplyConfiguration) WithOutbound(value string) *RouteApplyConfiguration {
	b.Outbound = &value
	return b
}

// WithFilterSelector sets the FilterSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FilterSelector field is set to the value of the last call.
func (b *RouteApplyConfiguration) WithFilterSelector(value string) *RouteApplyConfiguration {
	b.FilterSelector = &value
	return b
}

// WithWorkloadEnvSelectors adds the given value to the WorkloadEnvSelectors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the WorkloadEnvSelectors field.
func (b *RouteApplyConfiguration) WithWorkloadEnvSelectors(values ...string) *RouteApplyConfiguration {
	for i := range values {
		b.WorkloadEnvSelectors = append(b.WorkloadEnvSelectors, values[i])
	}
	return b
}

// WithTimeout sets the Timeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timeout field is set to the value of the last call.
func (b *RouteApplyConfiguration) WithTimeout(value int) *RouteApplyConfiguration {
	b.Timeout = &value
	return b
}

// WithConfig adds the given value to the Config field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Config field.
func (b *RouteApplyConfiguration) WithConfig(values ...**v1alpha1.Config) *RouteApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConfig")
		}
		b.Config = append(b.Config, *values[i])
	}
	return b
}
