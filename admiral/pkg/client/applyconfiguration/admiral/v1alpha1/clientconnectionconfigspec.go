/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	model "github.com/istio-ecosystem/admiral/admiral/pkg/apis/admiral/model"
)

// ClientConnectionConfigSpecApplyConfiguration represents an declarative configuration of the ClientConnectionConfigSpec type for use
// with apply.
type ClientConnectionConfigSpecApplyConfiguration struct {
	ConnectionPool *model.ConnectionPool `json:"connectionPool,omitempty"`
	Tunnel         *model.Tunnel         `json:"tunnel,omitempty"`
}

// ClientConnectionConfigSpecApplyConfiguration constructs an declarative configuration of the ClientConnectionConfigSpec type for use with
// apply.
func ClientConnectionConfigSpec() *ClientConnectionConfigSpecApplyConfiguration {
	return &ClientConnectionConfigSpecApplyConfiguration{}
}

// WithConnectionPool sets the ConnectionPool field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConnectionPool field is set to the value of the last call.
func (b *ClientConnectionConfigSpecApplyConfiguration) WithConnectionPool(value model.ConnectionPool) *ClientConnectionConfigSpecApplyConfiguration {
	b.ConnectionPool = &value
	return b
}

// WithTunnel sets the Tunnel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Tunnel field is set to the value of the last call.
func (b *ClientConnectionConfigSpecApplyConfiguration) WithTunnel(value model.Tunnel) *ClientConnectionConfigSpecApplyConfiguration {
	b.Tunnel = &value
	return b
}
