/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// AdaptiveConcurrencyApplyConfiguration represents an declarative configuration of the AdaptiveConcurrency type for use
// with apply.
type AdaptiveConcurrencyApplyConfiguration struct {
	LatencyThreshold          *string  `json:"latencyThreshold,omitempty"`
	SkippedURLs               []string `json:"skippedURLs,omitempty"`
	SampleAggregatePercentile *int     `json:"sampleAggregatePercentile,omitempty"`
	ConcurrencyUpdateInterval *string  `json:"concurrencyUpdateInterval,omitempty"`
	MinRTTCalInterval         *string  `json:"minRTTCalInterval,omitempty"`
	MinRTTCalJitter           *int     `json:"minRTTCalJitter,omitempty"`
	MinRTTCalRequestCount     *int     `json:"minRTTCalRequestCount,omitempty"`
	MinRTTCalMinConcurrency   *int     `json:"minRTTCalMinConcurrency,omitempty"`
	Enabled                   *bool    `json:"enabled,omitempty"`
}

// AdaptiveConcurrencyApplyConfiguration constructs an declarative configuration of the AdaptiveConcurrency type for use with
// apply.
func AdaptiveConcurrency() *AdaptiveConcurrencyApplyConfiguration {
	return &AdaptiveConcurrencyApplyConfiguration{}
}

// WithLatencyThreshold sets the LatencyThreshold field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LatencyThreshold field is set to the value of the last call.
func (b *AdaptiveConcurrencyApplyConfiguration) WithLatencyThreshold(value string) *AdaptiveConcurrencyApplyConfiguration {
	b.LatencyThreshold = &value
	return b
}

// WithSkippedURLs adds the given value to the SkippedURLs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SkippedURLs field.
func (b *AdaptiveConcurrencyApplyConfiguration) WithSkippedURLs(values ...string) *AdaptiveConcurrencyApplyConfiguration {
	for i := range values {
		b.SkippedURLs = append(b.SkippedURLs, values[i])
	}
	return b
}

// WithSampleAggregatePercentile sets the SampleAggregatePercentile field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SampleAggregatePercentile field is set to the value of the last call.
func (b *AdaptiveConcurrencyApplyConfiguration) WithSampleAggregatePercentile(value int) *AdaptiveConcurrencyApplyConfiguration {
	b.SampleAggregatePercentile = &value
	return b
}

// WithConcurrencyUpdateInterval sets the ConcurrencyUpdateInterval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConcurrencyUpdateInterval field is set to the value of the last call.
func (b *AdaptiveConcurrencyApplyConfiguration) WithConcurrencyUpdateInterval(value string) *AdaptiveConcurrencyApplyConfiguration {
	b.ConcurrencyUpdateInterval = &value
	return b
}

// WithMinRTTCalInterval sets the MinRTTCalInterval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MinRTTCalInterval field is set to the value of the last call.
func (b *AdaptiveConcurrencyApplyConfiguration) WithMinRTTCalInterval(value string) *AdaptiveConcurrencyApplyConfiguration {
	b.MinRTTCalInterval = &value
	return b
}

// WithMinRTTCalJitter sets the MinRTTCalJitter field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MinRTTCalJitter field is set to the value of the last call.
func (b *AdaptiveConcurrencyApplyConfiguration) WithMinRTTCalJitter(value int) *AdaptiveConcurrencyApplyConfiguration {
	b.MinRTTCalJitter = &value
	return b
}

// WithMinRTTCalRequestCount sets the MinRTTCalRequestCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MinRTTCalRequestCount field is set to the value of the last call.
func (b *AdaptiveConcurrencyApplyConfiguration) WithMinRTTCalRequestCount(value int) *AdaptiveConcurrencyApplyConfiguration {
	b.MinRTTCalRequestCount = &value
	return b
}

// WithMinRTTCalMinConcurrency sets the MinRTTCalMinConcurrency field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MinRTTCalMinConcurrency field is set to the value of the last call.
func (b *AdaptiveConcurrencyApplyConfiguration) WithMinRTTCalMinConcurrency(value int) *AdaptiveConcurrencyApplyConfiguration {
	b.MinRTTCalMinConcurrency = &value
	return b
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *AdaptiveConcurrencyApplyConfiguration) WithEnabled(value bool) *AdaptiveConcurrencyApplyConfiguration {
	b.Enabled = &value
	return b
}
