/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"time"

	v1 "github.com/istio-ecosystem/admiral/admiral/pkg/apis/admiral/v1"
	scheme "github.com/istio-ecosystem/admiral/admiral/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// RoutingPoliciesGetter has a method to return a RoutingPolicyInterface.
// A group's client should implement this interface.
type RoutingPoliciesGetter interface {
	RoutingPolicies(namespace string) RoutingPolicyInterface
}

// RoutingPolicyInterface has methods to work with RoutingPolicy resources.
type RoutingPolicyInterface interface {
	Create(*v1.RoutingPolicy) (*v1.RoutingPolicy, error)
	Update(*v1.RoutingPolicy) (*v1.RoutingPolicy, error)
	UpdateStatus(*v1.RoutingPolicy) (*v1.RoutingPolicy, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.RoutingPolicy, error)
	List(opts metav1.ListOptions) (*v1.RoutingPolicyList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.RoutingPolicy, err error)
	RoutingPolicyExpansion
}

// routingPolicies implements RoutingPolicyInterface
type routingPolicies struct {
	client rest.Interface
	ns     string
}

// newRoutingPolicies returns a RoutingPolicies
func newRoutingPolicies(c *AdmiralV1Client, namespace string) *routingPolicies {
	return &routingPolicies{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the routingPolicy, and returns the corresponding routingPolicy object, and an error if there is any.
func (c *routingPolicies) Get(name string, options metav1.GetOptions) (result *v1.RoutingPolicy, err error) {
	result = &v1.RoutingPolicy{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("routingpolicies").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of RoutingPolicies that match those selectors.
func (c *routingPolicies) List(opts metav1.ListOptions) (result *v1.RoutingPolicyList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.RoutingPolicyList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("routingpolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return result, err
}

// Watch returns a watch.Interface that watches the requested routingPolicies.
func (c *routingPolicies) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("routingpolicies").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a routingPolicy and creates it.  Returns the server's representation of the routingPolicy, and an error, if there is any.
func (c *routingPolicies) Create(routingPolicy *v1.RoutingPolicy) (result *v1.RoutingPolicy, err error) {
	result = &v1.RoutingPolicy{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("routingpolicies").
		Body(routingPolicy).
		Do().
		Into(result)
	return result, err
}

// Update takes the representation of a routingPolicy and updates it. Returns the server's representation of the routingPolicy, and an error, if there is any.
func (c *routingPolicies) Update(routingPolicy *v1.RoutingPolicy) (result *v1.RoutingPolicy, err error) {
	result = &v1.RoutingPolicy{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("routingpolicies").
		Name(routingPolicy.Name).
		Body(routingPolicy).
		Do().
		Into(result)
	return result, err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *routingPolicies) UpdateStatus(routingPolicy *v1.RoutingPolicy) (result *v1.RoutingPolicy, err error) {
	result = &v1.RoutingPolicy{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("routingpolicies").
		Name(routingPolicy.Name).
		SubResource("status").
		Body(routingPolicy).
		Do().
		Into(result)
	return result, err
}

// Delete takes name of the routingPolicy and deletes it. Returns an error if one occurs.
func (c *routingPolicies) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("routingpolicies").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *routingPolicies) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("routingpolicies").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched routingPolicy.
func (c *routingPolicies) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.RoutingPolicy, err error) {
	result = &v1.RoutingPolicy{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("routingpolicies").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return result, err
}
