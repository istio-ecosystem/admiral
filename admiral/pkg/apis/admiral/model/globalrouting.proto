

syntax = "proto3";

package admiral.global.v1alpha;

option go_package = "model";


// ```
// apiVersion: admiral.io/v1alpha1
// kind: GlobalTrafficPolicy
// metadata:
//   name: my-routing
// spec:
//   selector:
//     identity: my-identity
//     env: prd
//   policy:
//   - dnsPrefix: prd.accounts.global
//     lbType: topology
//   - dnsPrefix: prd.accounts-us-west2
//     lbType: failover
//     target:
//     - region: us-west2
//       weight: 90
//     - region: us-east2
//       weight: 10
//   - dnsPrefix: prd.accounts-us-east2
//     lbType: failover
//     target:
//     - region: us-west2
//       weight: 10
//     - region: us-east2
//       weight: 90
//     outlier_detection:
//       base_ejection_time: 180
//       consecutive_gateway_errors: 100
//       interval: 60
//
// ```

message GlobalTrafficPolicy {
    // REQUIRED: A list host name .
    repeated TrafficPolicy policy = 1;

    // REQUIRED: One or more labels that indicate a specific set of pods/VMs
    // on which this global routing policy should be applied. The scope of
    // label search is restricted to namespace mark for mesh enablement
    // this will scan all cluster and namespace
    map<string, string> selector = 2;
}

// TrafficPolicy describes routing for a hostname.
message TrafficPolicy {

    // REQUIRED: dns that can be used by client.  This name will have the
    // traffic type applied to it
    string dns = 1 [deprecated=true];

    // REQUIRED: type of global load distrubtion
    LbType lbType = 2;


    enum LbType {

        //Traffic with be routed to local locality first
        //if there are no health instances in the local locality traffic will be routed to
        //remote locality
        TOPOLOGY = 0;

        FAILOVER = 1;
    }

    //weigth of primary and secondary must each 100
    repeated TrafficGroup target = 3;

    //REQUIRED: dnsPrefix that will be prefixed for the service names being generated with this traffic policy
    //Ex: dnsPrefix = west => generated service name = west.stage.servicename.global
    string dnsPrefix = 4;

   message OutlierDetection {
       //REQUIRED: Minimum duration of time in seconds, the endpoint will be ejected
       int64 base_ejection_time = 1;
       //REQUIRED: No. of consecutive failures in specified interval after which the endpoint will be ejected
       uint32 consecutive_gateway_errors = 2;
       //REQUIRED: Time interval between ejection sweep analysis
       int64 interval = 3;
   }

   //OPTIONAL: to configure the outlierDetection in DestinationRule
    OutlierDetection outlier_detection = 5;

}

message TrafficGroup {

    //region for the traffic
    string region = 1;
    //weight for traffic this region should get.
    int32 weight = 2;

}