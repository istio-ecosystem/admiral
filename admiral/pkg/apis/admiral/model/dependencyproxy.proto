syntax = "proto3";

package admiral.global.v1alpha;

option go_package = "model";

// The below example of DependencyProxy
//```yaml
//    apiVersion: admiral.io/v1alpha1
//    kind: DependencyProxy
//    metadata:
//      name: dependency-proxy-example
//      namespace: admiral
//      annotations:
//          admiral.io/env: stage
//    spec:
//      destination:
//          identity: greeting
//          dns_suffix: "xyz"
//          dns_prefix:
//              - "test0"
//              - "test1"
//      proxy:
//          identity: nginx-gw
//```
// The above DependencyProxy will generate the following
// VirtualService object
//```yaml
//  apiVersion: networking.istio.io/v1alpha3
//  kind: VirtualService
//  metadata:
//      name: httpbin-vs
//  spec:
//      hosts:
//       - test0.stage.greeting.xyz
//       - test1.stage.greeting.xyz
//       - stage.greeting.xyz
//      http:
//       - route:
//          - destination:
//              host: stage.gateway.global
//              port:
//                number: 80
//```
//
message DependencyProxy {
    // Configuration of the destination identity for which the
    // requests should be proxied.
    Destination destination = 1;

    // Configuration of the proxy's identity through which the requests
    // to the destination will be proxied through.
    Proxy proxy = 2;

}

message Destination {
    // Identifier of the destination workload.
    string identity = 1;

    // An ordered list of all DNS prefixes.
    repeated string dns_prefixes = 2;

    // The DNS suffix that should be appended while
    // constructing the endpoint of the destination service.
    string dns_suffix = 3;
}

message Proxy {
    // Identifier of the proxy's workload
    string identity = 1;
}