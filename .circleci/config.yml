version: 2

jobs:
  build:
    working_directory: /go/pkg/mod/github.com/admiral
    docker:
    - image: circleci/golang:1.11
    steps:
    - checkout
    - run:
        name: Setting BRANCH, TAG & SHA variables
        command: |
          echo "export TAG=$CIRCLE_TAG" >> $BASH_ENV
          echo "export BRANCH=$CIRCLE_BRANCH" >> $BASH_ENV
          echo "export SHA=$CIRCLE_SHA1" >> $BASH_ENV
          source $BASH_ENV
    - run:
        name: Build
        command: |
          make build
    - run:
        name: Tests
        command: |
          make test
          mv c.out /tmp/
    - setup_remote_docker
    - run:
        name: Build Docker image
        command: |
          make docker-build
    - run:
        name: Publish Docker image
        command: |
          make docker-publish
    - persist_to_workspace:
        root: .
        paths:
          - .

  run-integration-tests:
    machine:
      image: circleci/classic:201808-01
    environment:
      K8S_VERSION: v1.10.0
      KUBECONFIG: /home/circleci/.kube/config
      MINIKUBE_VERSION: v0.30.0
      MINIKUBE_WANTUPDATENOTIFICATION: false
      MINIKUBE_WANTREPORTERRORPROMPT: false
      MINIKUBE_HOME: /home/circleci
      CHANGE_MINIKUBE_NONE_USER: true
    steps:
      - checkout
      - run:
          name: setup kubectl
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config
      - run:
          name: setup minikube
          command: |
            curl -Lo minikube https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - run:
          name: setup helm
          command: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get | bash
      - run:
          name: start minikube
          command: |
            sudo -E minikube start --vm-driver=none --cpus 2 --memory 2048 --kubernetes-version=${K8S_VERSION} &> $HOME/minikube.log 2>&1 < /dev/null
      - run:
          name: wait for minikube
          command: |
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}';
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done
      - run:
          name: Spin up test cluster
          command:  |
            docker version
            curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
              && chmod +x minikube
            sudo mkdir -p /usr/local/bin/
            sudo install minikube /usr/local/bin/
            minikube start --memory=8192 --cpus=4 --kubernetes-version=v1.14.2 --vm-driver=none
            export KUBECONFIG=~/.kube/config
      - run:
          name: Run Integration Test
          command:  |
            pwd
            ./tests/run.sh "1.14.2" "1.4.3" "/go/pkg/mod/github.com/admiral/admiral/install"

  publish-github-release:
    docker:
    - image: circleci/golang:1.11
    working_directory: /go/pkg/mod/github.com/admiral
    steps:
    - attach_workspace:
        at: .
    - run:
        name: Generate output
        command: |
          make download-kustomize
          echo "export PATH=/go/pkg/mod/github.com/admiral:$PATH" >> $BASH_ENV
          source $BASH_ENV
          (cd "./install/admiral/overlays/demosinglecluster" && kustomize edit set image "docker.io/admiralproj/admiral=docker.io/admiralproj/admiral:${CIRCLE_TAG}")
          make gen-yaml
          mkdir ./artifact
          mkdir admiral-install-${CIRCLE_TAG}
          cp -R out/* admiral-install-${CIRCLE_TAG}
          tar -zcvf ./artifact/admiral-install-${CIRCLE_TAG}.tar.gz admiral-install-${CIRCLE_TAG}
    - run:
        name: Publish Release on GitHub
        command: |
          go get github.com/tcnksm/ghr
          ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${CIRCLE_TAG} ./artifact/


workflows:
  version: 2
  build-and-release:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - run-integration-tests:
          filters:
            tags:
              only: /.*/
      - publish-github-release:
          requires:
            - build
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
